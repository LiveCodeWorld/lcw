script "lib_Array"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_Array
type: library
version: 0.7


--> Working on
-
function array_EmptyIndex sIndex
   local sArray
   repeat for each line sLine in sIndex
      put empty into sArray [sLine]
   end repeat
   return sArray
end array_EmptyIndex

command array_MakeExpandable @sArray
   repeat for each key sKey in sArray
      put sArray [sKey] into sIndex
      array_AddEmptyIndex sArray, sKey, sIndex
   end repeat
end array_MakeExpandable

command array_AddEmptyIndex @sArray, sKey, sIndex
   repeat for each line sLine in sIndex
      put empty into sArray [sKey][sLine]
   end repeat
   return sArray
end array_AddEmptyIndex

function array_FilterKeys someArray, includeKeyList
   -- see new Livecode filter function
   -- could use "intersect" ???
   repeat for each item someKey in includeKeyList
      put someArray [someKey] into filteredArray [someKey]
   end repeat
   return filteredArray
end array_FilterKeys

function array_AllNodes someArray
   -- should be recursive
   return array_List (someArray) -- for now two levels only
end array_AllNodes

function array_List someArray
   -- top and first level only (not recursive)
   -- unique index of all elements and keys in an array
   local indexArray
   repeat for each key someKey in someArray
      put empty into indexArray [someKey]
      put someArray [someKey] into keyElements
      if keyElements is an array then
         repeat for each key keyElement in keyElements
            if word 1 to -1 of keyElement is empty then next repeat
            put empty into indexArray [keyElement]
         end repeat
      else if keyElements is not empty then
         repeat for each line keyElement in keyElements
            if word 1 to -1 of keyElement is empty then next repeat
            put empty into indexArray [keyElement]
         end repeat
      end if
   end repeat
   return keys (indexArray)
end array_List

function array_Elements someArray
   -- thought there was a function or property for this?
   local arrayElements
   repeat for each key someKey in someArray
      get someArray [someKey]
      if it is not empty then put it & CR after arrayElements
   end repeat
   delete last char of arrayElements
   return arrayElements
end array_Elements


--> Move
-
function linkArray_Reverse someArray, pStrip
   local reversedArray
   repeat for each key someKey in someArray
      put someArray [someKey] into newKeyArray
      repeat for each key newKey in newKeyArray
         put newKeyArray [newKey] into reversedArray [newKey][someKey]
      end repeat
   end repeat
   return reversedArray
end linkArray_Reverse


--> Array | Reverse
-
function array_Reverse someArray, pQuick, pStrip
   local reversedArray
   if pQuick is not false then
      repeat for each key someKey in someArray
         put someArray [someKey] into newKeys
         repeat for each line newKey in newKeys
            put empty into reversedArray [newKey] [someKey]
         end repeat
      end repeat
      if pStrip is true then
         array_StripDeeperLevels reversedArray
      end if
   else
      repeat for each key someKey in someArray
         put someArray [someKey] into newKeys
         repeat for each line newKey in newKeys
            indexArray_Add someKey, newKey, reversedArray
         end repeat
      end repeat
   end if
   return reversedArray
end array_Reverse

function array_ConstructReverseDictionary idArray
   -- for one-one dictionary arrays
   -- put array_Reverse (idArray) into reverseArray
   local reversedArray
   repeat for each key someKey in idArray
      put idArray [someKey] into reverseKey
      put someKey into reversedArray [reverseKey] -- one-one dictionary
   end repeat
   return reversedArray
end array_ConstructReverseDictionary


--> Array
-
command array_ToFolder someFolder, someArray
   folder_Format someFolder
   folder_CreateNested someFolder
   repeat for each key someKey in someArray
      put someArray [someKey] into someValue
      if someValue is an array then
         -- recurse
         put someFolder & someKey into subFolder
         array_ToFolder subFolder, someValue
      else
         -- write out file
         put someFolder & someKey into someFile
         put someValue into url ("binfile:" & someFile)
      end if
   end repeat
end array_ToFolder

function array_FromFolder someFolder, pNoContents
   if there is not a folder someFolder then return empty
   folder_Format someFolder
   set the itemdelimiter to "/"
   put the defaultfolder into oFolder
   set the defaultfolder to someFolder
   put item -1 of someFolder into shortFolder
   
   put the files into shortFiles
   repeat for each line shortFile in shortFiles
      if char 1 of shortFile = "." then next repeat
      if pNoContents is true then
         put empty into someValue
      else
         put someFolder & shortFile into someFile
         put url ("binfile:" & someFile) into someValue
      end if 
      put someValue into someArray [shortFile]
   end repeat
   
   put the folders into shortFolders
   repeat for each line shortFolder in shortFolders
      -- recurse subfolders
      if char 1 of shortFolder = "." then next repeat
      put someFolder & shortFolder & "/" into subFolder
      put array_FromFolder (subFolder, pNoContents) into subArray
      put subArray into someArray [shortFolder]
   end repeat
   return someArray
end array_FromFolder

command array_StripEmptyKeys @someArray
   if someArray is empty then
      return empty
   end if
   repeat for each key someKey in someArray
      put someArray [someKey] into someValue
      if someValue is empty then
         delete variable someArray [someKey]
      end if
   end repeat
end array_StripEmptyKeys


--> Arrays
-
function array_PruneLeaves someArray
   repeat for each key someKey in someArray
      put someArray [someKey] into testLeaf
      if testLeaf is an array then
         put array_PruneLeaves (testLeaf) into prunedArray
         put prunedArray into someArray [someKey]
      else
         delete variable someArray [someKey]
      end if
   end repeat
   return someArray
end array_PruneLeaves

command array_Compare leftArray, rightArray, @commonArray, @leftWithoutArray, @rightWithoutArray
   put leftArray into leftWithoutArray
   put rightArray into rightWithoutArray
   repeat for each key leftKey in leftArray
      get rightArray [leftKey]
      if it is an array or it is not empty then
         put it into commonArray [leftKey]
         delete variable leftWithoutArray [leftKey]
      end if
      delete variable rightWithoutArray [leftKey]
   end repeat
end array_Compare

function array_Sample someArray, pHowMany
   if pHowMany is empty then put 10 into pHowMany
   put keys (someArray) into someKeys
   repeat pHowMany
      put any line of someKeys into someKey
      put someArray [someKey] into sampleArray [someKey]
      line_Delete someKey, someKeys
   end repeat
   return sampleArray
end array_Sample

function array_KeyFromPath somePath, pPathUpNum, pDelim
   if pDelim is empty then put "/" into pDelim
   set the itemdelimiter to pDelim
   put the number of items of somePath - pPathUpNum into maxNum
   repeat with itemNum = 1 to maxNum
      put item itemNum of somePath into arrayKey [itemNum]
   end repeat
   return arrayKey
end array_KeyFromPath

command array_Union @mainArray, arrayToAdd
   -- fixes bug in union when arrays are empty
   -- only adds arrays
   if mainArray is an array then
      if arrayToAdd is an array then
         union mainArray with arrayToAdd
      else
         -- do nothing
      end if
   else if arrayToAdd is an array then
      put arrayToAdd into mainArray
   else
      put empty into mainArray
   end if
end array_Union

command array_FlatUnion newArray, @someArray, keyStem
   repeat for each key someKey in newArray
      put newArray [someKey] into someValue
      if someValue is not empty then
         put keyStem & someKey into flatKey
         put someValue into someArray [flatKey]
      end if
   end repeat
end array_FlatUnion

function array_MakeTwoWay someArray
   put array_Reverse(someArray) into reversedArray
   union someArray with reversedArray
   return someArray
end array_MakeTwoWay

command array_StripDeeperLevels @someArray
   repeat for each key someKey in someArray
      put someArray [someKey] into nextLevel
      if nextLevel is an array then
         put keys (nextLevel) into someArray [someKey]
      end if
   end repeat
end array_StripDeeperLevels


--> Array | More
-
function array_Difference someArray, anotherArray
   put someArray into tempArray
   intersect tempArray with anotherArray
   repeat for each line someKey in (the keys of tempArray)
      delete local someArray [someKey]
      delete local anotherArray [someKey]
   end repeat
   union someArray with anotherArray
   return anotherArray
end array_Difference

function array_Subtract someArray, fromThisArray
   put fromThisArray into tempArray
   intersect tempArray with someArray
   repeat for each line someKey in (the keys of tempArray)
      delete local fromThisArray [someKey]
   end repeat
   return fromThisArray
end array_Subtract

function array_DeleteKeys keyList, someArray
   repeat for each item someItem in keyList
      delete local someArray[someItem]
   end repeat
   return someArray
end array_DeleteKeys

command array_Add someArray, @toArray
   -- why cant we just test if array is empty?
   if keys(toArray) is empty then
      -- why does "union" with an empty base array always result in empty?
      put someArray into toArray
   else
      union toArray with someArray
   end if
end array_Add

command array_AddNew newArray, @dataArray
   put empty into addedKeys
   repeat for each key someKey in newArray
      put newArray [someKey] into newValue
      put dataArray [someKey] into oldValue
      if oldValue is not newValue then
         put someKey & CR after addedKeys
         put newValue into dataArray [someKey]
      end if
   end repeat
   delete last char of addedKeys
   return addedKeys
end array_AddNew

function array_GetSortByNumber someArray
   combine someArray by CR and comma
   sort someArray descending numeric by item 2 of each
   
   set the columndelimiter to comma
   split someArray by column
   put someArray [1] into sortedKeys
   return sortedKeys
end array_GetSortByNumber

function array_ShortFileNames pFolder
   if pFolder is empty then 
      put lcw_ArrayFolder () into pFolder
   else
      folder_Format pFolder
   end if
   return file_ListShort (pFolder) into shortFiles
   return shortFiles
end array_ShortFileNames


--> Array | Search
-
function array_MatchContents searchValue, someArray
   repeat for each key foundKey in someArray
      put someArray [foundKey] into foundValue
      if foundValue is searchValue then
         return foundKey
      end if
   end repeat
   return empty
end array_MatchContents

function array_FindContents searchValue, someArray, matchWhole
   set the wholematches to (matchWhole is not false)
   repeat for each key foundKey in someArray
      put someArray [foundKey] into testIndex
      if searchValue is among the lines of testIndex then
         return foundKey
      end if
   end repeat
   return empty
end array_FindContents


--> Array | Index
-
command array_InsertIntoIndex someValue, someKey, @someArray
   put someArray[someKey] into oldIndex
   line_Insert someValue, oldIndex
   put oldIndex into someArray[someKey]
end array_InsertIntoIndex

command array_DeleteFromIndex someValue, someKey, @someArray
   put someArray [someKey] into someIndex
   line_Delete someValue, someIndex
   if someIndex is empty then
      delete local someArray [someKey]
   else
      put someIndex into someArray [someKey]
   end if
end array_DeleteFromIndex

function array_TranslateIndex someArray, keyIndex, preFix, postFix
   put empty into translatedIndex
   repeat for each line someKey in keyIndex
      put preFix & someArray[someKey] & postFix & return after translatedIndex
   end repeat
   delete last char of translatedIndex
   return translatedIndex
end array_TranslateIndex


--> Array | Elements
-
/*
These handlers work on both keys and values (treated as indexes or lines) of arrays.
*/

command array_ReplaceElement someElement, newElement, @someArray
   repeat for each key testKey in someArray
      put someArray [testKey] into testElements
      
      line_Replace someElement, newElement, testElements
      if testKey = someElement then
         put testElements into newArray [newElement]
      else
         put testElements into newArray [testKey]
      end if
   end repeat
   -- return newArray
end array_ReplaceElement

function array_SortElements someArray, @arrayKeys
   put keys(someArray) into arrayKeys
   sort arrayKeys
   put empty into arrayElements
   repeat for each line someKey in arrayKeys
      put someArray[someKey] & return after arrayElements
   end repeat
   delete last char of arrayElements
   return arrayElements
end array_SortElements


--> Array | Outline
-
function array_FromOutline someOutline
   return outline_ToArray (someOutline)
end array_FromOutline

function array_ToOutline someArray, pSortKeys
   -- recursive version for nested arrays
   local someOutline
   
   if pSortKeys is empty then
      -- faster
      repeat for each key someKey in someArray
         put someKey & CR after someOutline
         get someArray [someKey]
         if it is an array then get array_ToOutline(it)
         if it is not empty then
            put outline_IncreaseIndent(it, 1) & CR after someOutline
         end if
      end repeat
      delete last char of someOutline
      return someOutline
   else
      put keys(someArray) into someKeys
      sort someKeys
      repeat for each line someKey in someKeys
         put someKey & CR after someOutline
         get someArray [someKey]
         if it is an array then get array_ToOutline (it, pSortKeys)
         if it is not empty then
            put outline_IncreaseIndent (it) & CR after someOutline
         end if
      end repeat
      delete last char of someOutline
      return someOutline
   end if
end array_ToOutline

function array_ExpandSorted someArray, sortKey, direction
   -- was "expandArray" "array_GetExpanded"
   put keys(someArray) into keyNames
   if keyNames is empty then return someArray
   if sortKey is empty then
      sort keyNames
   else if direction is empty then
      put "sort keyNames" && sortKey into doScript
      do doScript
   else
      put "sort keyNames" && direction && sortKey into doScript
      do doScript
   end if
   put empty into someOutline
   repeat for each line keyName in keyNames
      line_Insert keyname, someOutline
      put someArray[keyName] into someThread
      if someThread is empty then next repeat
      put outline_IncreaseIndent(someThread) into indentedThread
      put CR & indentedThread after someOutline
   end repeat
   return someOutline
end array_ExpandSorted

function array_ToHtmlLinks someArray
   local htmlLinks
   repeat for each key someTitle in someArray
      put someArray [someTitle] into someLink
      put html_ConstructNameLink(someTitle, someLink) & CR after htmlLinks
   end repeat
   delete last char of htmlLinks
   return htmlLinks
end array_ToHtmlLinks
